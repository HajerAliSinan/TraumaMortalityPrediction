# -*- coding: utf-8 -*-
"""Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FyUekIrIQcZ3U5FXn0QZPZ740jPdBy-0
"""

import joblib
import streamlit as st
import joblib
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from catboost import CatBoostClassifier

class EnsembleModel:
    def __init__(self):
        self.scaler = StandardScaler()
        self.rf = RandomForestClassifier(n_estimators=200, random_state=42)
        self.catboost = CatBoostClassifier(verbose=0, random_state=42)

    def fit(self, X, Y):
        # Standardize for RF (optional — RF isn’t as sensitive but we can keep for consistency)
        X_scaled = self.scaler.fit_transform(X)
        self.rf.fit(X_scaled, Y)
        self.catboost.fit(X, Y)
        return self

    def predict_proba(self, X):
        rf_probs = self.rf.predict_proba(self.scaler.transform(X))[:, 1]
        cat_probs = self.catboost.predict_proba(X)[:, 1]
        return (rf_probs + cat_probs) / 2  # Average the probabilities

    def predict(self, X):
        probs = self.predict_proba(X)
        return (probs > 0.5).astype(int)


# Load your trained model
model = joblib.load("mortality_model_RF_Cat.pkl")

st.title("🩸 Traumatic Injury Mortality Risk Predictor")
st.write("Enter patient lab results to predict mortality risk (0 = Survived, 1 = Died).")

# Feature names (must match the training order)
feature_names = [
    "ISS", "Maximum Stiffness (Pa)", "Clotting Rate (Pa/s)",
    "D-dimer", "Fibrinogen Concentration", "Velocity Index",
    "PTT", "SBP",  "DBP", "GCS"
]

user_input = []
for feature in feature_names:
    value = st.number_input(f"{feature}:", value=0.0, format="%.2f")
    user_input.append(value)

if st.button("Predict"):
    input_array = np.array([user_input])  # shape (1, 10)
    prediction = model.predict(input_array)[0]
    probability = model.predict_proba(input_array)[0]  # prob of death (class 1)

    st.subheader("🧾 Result:")
    st.write(f"**Prediction**: {'☠️ Died (1)' if prediction else '💚 Survived (0)'}")
    st.write(f"**Probability of Death**: {probability:.2%}")